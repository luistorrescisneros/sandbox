name: publish

on:
  pull_request:
    branches: ['publish']
    types: [closed]
  push:
    branches: ['feature/**', 'KLDKB**', 'main']
    tags-ignore: ['**']

env:
  HELLO_SCRIPT: docker\scripts\hello.ps1

# trigger
#  pull_request:
#    branches: [main]
#    types: [opened, closed]
#
# Note that branches: ['**'] disables workflow when pushing tags
# The above  "on:"" triggers workflows twice after closing a PR. One for PR and one for push.
# The only issue with above approach is that it triggers the workflow twice after succesful PR
# But it allows developer to trigger workflow while making changes
# bash tag-release.sh --branch publish --type build

jobs:
  publish:
    runs-on: [self-hosted, torresl-1, Windows]
    steps:
      - name: Checkout source code 
        uses: actions/checkout@v3
        with:
          token: ${{secrets.SANDBOX_TOKEN}}
      #- name: Test Docker
      # run: docker version
      #- name: Build Docker-Image Out of Service
      #  run: docker build . --no-cache --file docker/build/Dockerfile --tag sandbox-build:test 
      #- name: Start Docker-Container 
      #  run: docker run -d -it --name container-id${{github.run_id}}
      - name: Build
        run: |
          dir 
          cat README.md
          echo "Project built"
      - name: Publish
        id: published_version
        #if: github.event.pull_request.merged == true && github.head_ref == 'main' && startsWith(github.base_ref,'publish')
        run: |
          ."C:\Program Files\Git\bin\bash.exe" tag-release.sh --branch feature/conatains --type build
          echo "VERSION=$(git describe)" >> $Env:GITHUB_OUTPUT
          cat conanpkg-info.yml
        #echo "::set-output name=VERSION::$(git describe)" 
      - name: Print version
        #if: github.event.pull_request.merged == true && github.head_ref == 'main' && startsWith(github.base_ref,'publish')
        run: |
          echo "Published Version is ${{steps.published_version.outputs.VERSION}}"
          cat conanpkg-info.yml
          (Get-Content -Path .\conanpkg-info.yml) | ForEach-Object {$_ -Replace '0.0.0.0', "${{steps.published_version.outputs.VERSION}}"} | Set-Content -Path .\conanpkg-info.yml
          cat conanpkg-info.yml
      - name: GitHub Context
        env:
          GITHUB_CONTEXT: ${{ toJSON(github) }}
        run: echo "$GITHUB_CONTEXT"
      - name: GitHub Workspace
        run: |
          $pathToScript=$($GITHUB_WORKSPACE + ${{env.HELLO_SCRIPT}})
          echo "$pathToScript"
          ."$pathToScript"

  #clean:
  #  runs-on: [self-hosted, torresl-1, Windows]
  #  needs: [publish]
  #  steps:
  #    - name: Stop Docker-Container
  #      run: docker stop container-id${{github.run_id}}
  #    - name: Delete Docker-Container
  #      run: docker container rm container-id${{github.run_id}}
  #    - name: Delete Docker-Image
  #      run: docker rmi sandbox-build:test
      
# echo "::set-output name=image_id::$(docker images -q ${{env.tools-image}})"
# steps.get_image.outputs.image_id == ''
#- name: Set color
#  id: random-color-generator
#  run: echo "SELECTED_COLOR=green" >> $GITHUB_OUTPUT
#- name: Get color
#  run: echo "The selected color is ${{ steps.random-color-generator.outputs.SELECTED_COLOR }}"
#- name: Version by Echo
#  run: echo "$(git version)"
#- name: Output Git-Version
#  id: get_version 
#  run: echo "::set-output name=VERSION::$(git version)"
#- name: Get Version
#  run: echo "version is ${{steps.get_version.outputs.VERSION}}"
#(Get-Content -Path .\Notice.txt) |
#    ForEach-Object {$_ -Replace 'Warning', 'Caution'} |
#        Set-Content -Path .\Notice.txt
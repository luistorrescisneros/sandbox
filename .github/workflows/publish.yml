name: publish

env:
  publish-branch: publish

on:
  pull_request:
    branches: ['publish']
    types: [closed]
  push:
    branches: ['feature/**', 'KLDKB**', 'main']
    tags-ignore: ['**']


#  pull_request:
#    branches: [main]
#    types: [opened, closed]
#
# Note that branches: ['**'] disables workflow when pushing tags
# The above  "on:"" triggers workflows twice after closing a PR. One for PR and one for push.
# The only issue with above approach is that it triggers the workflow twice after succesful PR
# But it allows developer to trigger workflow while making changes
# bash tag-release.sh --branch publish --type build

jobs:
  publish:
    runs-on: [self-hosted, torresl-1, Windows]
    steps:
      - name: Checkout source code 
        uses: actions/checkout@v3
        with:
          token: ${{secrets.SANDBOX_TOKEN}} 
      - name: Build
        run: |
          dir 
          cat README.md
          echo "Project built"
# echo "::set-output name=image_id::$(docker images -q ${{env.tools-image}})"
# steps.get_image.outputs.image_id == ''
      - name: Version by Echo
        run: echo "$(git version)"
      - name: Output Git-Version
        id: get_version 
        run: echo "VERSION=v1.0.0.0" >> $GITHUB_OUTPUT
      - name: Get Version
        run: echo "version is ${{steps.get_version.outputs.VERSION}}"
      - name: Publish
        if: github.event.pull_request.merged == true && github.head_ref == 'main'
        run: |
          ."C:\Program Files\Git\bin\bash.exe" tag-release.sh --branch publish --type build
          echo "version=$(git describe)" >> $GITHUB_ENV
          echo "${{env.version}}"
          cat conanpkg-info.yml 
      - name: GitHub Context
        env:
          GITHUB_CONTEXT: ${{ toJSON(github) }}
        run: echo "$GITHUB_CONTEXT"
      - name: Print version
        if: github.event.pull_request.merged == true && github.head_ref == 'main'
        run: |
          echo "${{env.version}}"